// airquality.go
package airquality

import (
	"fmt"
	"encoding/json"
	"sync"
	"generator/utils"
	"math/rand"
)

type AirQualityData struct {
	Timestamp  string
	SensorId   string
	SensorType string
	Readings   map[string]any
	Location   map[string]float64
	Status     string
}

func generateAirQualityId(current int) string {
	return fmt.Sprintf("air_quality_%04d", current)
}

func generateAirQualityReadings() map[string]any {
	check := rand.Intn(100)
	missingValue := check < 5
	fields := []string{"ozone", "CO"}
	choice := rand.Intn(2)
	result := make(map[string]any)
	result["PM2_5"] = rand.Intn(125)
	result["PM10"] = rand.Intn(375)
	result["ozone"] = rand.Intn(200)
	result["CO"] = rand.Intn(40)
	result["NO2"] = rand.Intn(115)
	if missingValue {
		result[fields[choice]] = nil
	}
	return result
}

func generateAirQualityLocation() map[string]float64 {
	result := make(map[string]float64)
	latitude := utils.TruncateFloat(rand.Float64()*90, 4)
	longitude := utils.TruncateFloat(rand.Float64()*180, 4)
	if rand.Float64() < 0.5 {
		latitude = -latitude
	}
	if rand.Float64() < 0.5 {
		longitude = -longitude
	}
	result["latitude"] = latitude
	result["longitude"] = longitude
	return result
}

func checkForEmptyValues(data AirQualityData) bool {
	for k, v := range data.Readings {
		if len(k) == 0 || v == nil {
			return true
		}
	}
	return false
}

func generateAirQualityDataStatus(data AirQualityData) string {
	var result string
	moderates := 0
	dangerous := 0
	for k, v := range data.Readings {
		switch k {
		case "PM2_5":
			if v.(int) > 120 {
				dangerous++
			} else if v.(int) > 60 {
				moderates++
			} 
		case "PM10":
			if v.(int) > 350 {
				dangerous++
			} else if v.(int) > 100 {
				moderates++
			} 
		case "ozone":
			if v != nil {
				if v.(int) > 175 {
					dangerous++
				} else if v.(int) > 100 {
					moderates++
				} 
			}
		case "CO":
			if v != nil {
				if v.(int) > 35 {
					dangerous++
				} else if v.(int) > 9 {
					moderates++
				} 
			}
		case "NO2":
			if v.(int) > 100 {
				dangerous++
			} else if v.(int) > 50 {
				moderates++
			} 
		}
	}
	switch {
	case dangerous >= 2:
		result = "DANGEROUS"
	case moderates >= 3:
		result = "MODERATE"
	case moderates > 1 || (dangerous > 0 && moderates < 3):
		result = "ACCEPTABLE"
	default:
		result = "SAFE"
	}
	if !utils.ValidateTimestamp(data.Timestamp) {
		result = "ERROR"
	}
	return result
}

func generateAirQualityDataStruct(current int) AirQualityData {
	var result AirQualityData
	result.Timestamp = utils.GenerateTimestamp(utils.AirQuality, 0, current)
	fmt.Println(result.Timestamp)
	result.SensorId = generateAirQualityId(current)
	result.SensorType = "air_quality"
	result.Readings = generateAirQualityReadings()
	result.Location = generateAirQualityLocation()
	result.Status = generateAirQualityDataStatus(result)
	return result
}

func GenerateAirQualityData(current int, c chan string, wg *sync.WaitGroup) {
	defer wg.Done()
	data := generateAirQualityDataStruct(current)
	result, err := json.Marshal(data)
	if err != nil {
		fmt.Println("Unable to marshal json data for air quality.")
		return 
	}
	c <- string(result)
}

/*
Air quality template:
{
  "timestamp": "2025-03-21T10:00:00Z",
  "sensor_id": "air_quality_001",
  "sensor_type": "air_quality",
  "readings": {
    "PM2_5": 12.3,
    "PM10": 20.5,
    "ozone": 30,
    "CO": 0.5,
    "NO2": 18
  },
  "location": {
    "latitude": 40.7128,
    "longitude": -74.0060
  },
  "status": "OK"
}
*/

// main.go
package main

import (
	"context"
	"fmt"
	"math/rand"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"generator/airquality"
	"generator/weather"
	"github.com/segmentio/kafka-go"
)

func main() {
	// Create a context that is canceled on an interrupt signal.
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// Set up a channel to listen for interrupt signals.
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)
	go func() {
		sig := <-sigChan
		fmt.Printf("Received signal: %s. Initiating graceful shutdown...\n", sig)
		cancel()
	}()

	// Initialize Kafka writer outside of the loop for reuse.
	writer := kafka.NewWriter(kafka.WriterConfig{
		Brokers: []string{"localhost:9092"},
		Topic:   "sensor-data",
	})
	// Ensure the writer is closed on exit.
	defer func() {
		writer.Close()
		fmt.Println("Kafka writer closed.")
	}()

	// Infinite loop that periodically generates data.
	for {
		// Check for cancellation before starting an iteration.
		select {
		case <-ctx.Done():
			fmt.Println("Exiting main loop.")
			return
		default:
		}

		c := make(chan string)
		var wg sync.WaitGroup

		// Launch data generation concurrently.
		for i := range 1000 {
			wg.Add(1)
			go weather.GenerateWeatherData(i, c, &wg)
			wg.Add(1)
			go airquality.GenerateAirQualityData(i, c, &wg)
		}
		go func() {
			wg.Wait()
			close(c)
		}()

		// Buffer for batching messages.
		batchSize := 50
		batch := make([]kafka.Message, 0, batchSize)

		// Process and batch messages.
		for entry := range c {
			msg := kafka.Message{
				Key:   []byte("sensor-key"),
				Value: []byte(entry),
			}
			batch = append(batch, msg)

			if len(batch) >= batchSize {
				if err := writer.WriteMessages(ctx, batch...); err != nil {
					fmt.Println("Error writing batch:", err)
				} else {
					fmt.Println("Batch sent successfully!")
				}
				batch = batch[:0]
			}
		}

		// Send any remaining messages.
		if len(batch) > 0 {
			if err := writer.WriteMessages(ctx, batch...); err != nil {
				fmt.Println("Error writing final batch:", err)
			} else {
				fmt.Println("Final batch sent successfully!")
			}
		}

		// Delay before the next iteration.
		delay := rand.Intn(5) + 1
		select {
		case <-ctx.Done():
			return
		case <-time.After(time.Second * time.Duration(delay)):
		}
	}
}

// utils.go
package utils

import (
	"math"
	"math/rand"
	"time"
	"slices"
	"strings"
	"fmt"
)

type Option int

const (
	Weather Option = iota
	AirQuality
)

func TruncateFloat(val float64, decimals int) float64 {
	factor := math.Pow(10, float64(decimals))
	return math.Trunc(val*factor) / factor
}

func generateWeatherTimestamp(current int) string {
	yearMax := 2050
	yearMin := 1900
	year := rand.Intn(yearMax-yearMin+1) + yearMin
	month := rand.Intn(12) + 1
	day := rand.Intn(30) + 1
	hour := rand.Intn(11) + 1
	minute := rand.Intn(58) + 1
	second := rand.Intn(58) + 1
	result := fmt.Sprintf("%d-%02d-%02dT%02d:%02d:%02dZ", year, month, day, hour, minute, second)
	return result
}

// GenerateTimestamp takes the current sequential index and returns a sequential timestamp.
func generateAirQualityTimestamp(current int) string {
	// Define a fixed starting point (hardcoded for reproducibility)
	baseTime := time.Date(2020, time.January, 1, 0, 0, 0, 0, time.UTC)
	// Increment the base time by 'current' seconds (adjust the multiplier if needed)
	newTime := baseTime.Add(time.Duration(current) * time.Second)
	fmt.Println(newTime)
	// Format the timestamp in ISO8601 format (RFC3339)
	return newTime.Format(time.RFC3339)
}

func GenerateTimestamp(op Option, curWeather int, curAirQuality int) string {
	switch op {
	case Weather:
		return generateWeatherTimestamp(curWeather)
	case AirQuality:
		return generateAirQualityTimestamp(curAirQuality)
	}
	return ""
}

func ValidateTimestamp(timestamp string) bool {
	temp := strings.Split(timestamp, "T")
	date := temp[0]
	temp = strings.Split(date, "-")
	month, day := temp[1], temp[2]

	short := []string{"02", "04", "06", "09", "11"}

	if month == "02" && strings.HasPrefix(day, "3") {
		return false
	}
	if day == "31" && slices.Contains(short, month) {
		return false
	}
	return true
}

// weather.go
package weather

import (
	"fmt"
	"encoding/json"
	"sync"
	"math/rand"
	"generator/utils"
)

type WeatherData struct {
	Timestamp  string
	SensorId   string
	SensorType string
	Readings   map[string]any
	Location   map[string]float64
	Status     string
}

func generateWeatherId(current int) string {
	return fmt.Sprintf("weather_%04d", current)
}

func generateWeatherReadings() map[string]any {
	check := rand.Intn(100)
	missingValue := check < 5
	fields := []string{"pressure", "wind_speed", "wind_direction", "precipitation"}
	choice := rand.Intn(4)
	result := make(map[string]any)
	result["temperature"] = utils.TruncateFloat(rand.Float64()*36, 2)
	result["humidity"] = rand.Intn(100)
	result["pressure"] = rand.Intn(100) + 950
	result["wind_speed"] = utils.TruncateFloat(rand.Float64()*60, 2)
	result["wind_direction"] = []string{"N", "NE", "E", "SE", "S", "SW", "W", "NW"}[rand.Intn(8)]
	result["precipitation"] = utils.TruncateFloat(rand.Float64()*10, 2)
	if missingValue {
		result[fields[choice]] = nil
	}
	return result
}

func generateWeatherLocation() map[string]float64 {
	result := make(map[string]float64)
	latitude := utils.TruncateFloat(rand.Float64()*90, 4)
	longitude := utils.TruncateFloat(rand.Float64()*180, 4)
	if rand.Float64() < 0.5 {
		latitude = -latitude
	}
	if rand.Float64() < 0.5 {
		longitude = -longitude
	}
	result["latitude"] = latitude
	result["longitude"] = longitude
	return result
}

func checkForEmptyValues(data WeatherData) bool {
	for k, v := range data.Readings {
		if len(k) == 0 || v == nil {
			return true
		}
	}
	return false
}

func generateWeatherDataStatus(data WeatherData) string {
	var result string
	longitude := data.Location["longitude"]
	if longitude > 30 || longitude < -25.0 {
		humidity := data.Readings["humidity"].(int)
		temperature := data.Readings["temperature"].(float64)
		hasAnomalies := humidity > 90.0 || temperature > 32.2
		if hasAnomalies {
			result = "WARNING"
		}
	}
	if checkForEmptyValues(data) || !utils.ValidateTimestamp(data.Timestamp) {
		result = "ERROR"
	}
	if len(result) == 0 {
		result = "OK"
	}
	return result
}

func generateWeatherDataStruct(current int) WeatherData {
	var result WeatherData
	result.Timestamp = utils.GenerateTimestamp(utils.Weather, current, 0)
	result.SensorId = generateWeatherId(current)
	result.SensorType = "weather"
	result.Readings = generateWeatherReadings()
	result.Location = generateWeatherLocation()
	result.Status = generateWeatherDataStatus(result)
	return result
}

func GenerateWeatherData(current int, c chan string, wg *sync.WaitGroup) {
	defer wg.Done()
	data := generateWeatherDataStruct(current)
	result, err := json.Marshal(data)
	if err != nil {
		fmt.Println("Unable to marshal json data for weather.")
		return 
	}
	c <- string(result)
}

/*
Weather data template:
{
  "timestamp": "2025-03-21T10:00:00Z",
  "sensor_id": "weather_001",
  "sensor_type": "weather",
  "readings": {
    "temperature": 22.5,
    "humidity": 55,
    "pressure": 1013,
    "wind_speed": 5.2,
    "wind_direction": "NE",
    "precipitation": 0.0
  },
  "location": {
    "latitude": 40.7128,
    "longitude": -74.0060
  },
  "status": "OK"
}
*/
